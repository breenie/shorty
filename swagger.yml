openapi: "3.0.1"
info:
  title:
    Fn::Sub: Shorty ${EnvironmentName}
  version: "1.0.0"

x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params:
    validateRequestBody: false
    validateRequestParameters: true
  body:
    validateRequestBody: true
    validateRequestParameters: false

paths:
  "/urls/{id}":
    get:
      summary: Gets a URL by its ID
      x-amazon-apigateway-request-validator: params
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The short URL fragment
      responses:
        "301":
          description: "301 redirect"
          headers:
            Location:
              type: "string"
            Cache-Control:
              type: "string"

      ## API Gateway Integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [DDBReadRole, Arn]
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            Fn::Sub: |
              {
                "Key": {
                  "id": {
                    "S": "$input.params().path.id"
                  }
                }, 
                "TableName": "${LinkTable}"
              }
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "301"
            # responseParameters:
            #   method.response.header.Location: ""
            #   # {
            #   #   "Fn::Sub":
            #   #     [
            #   #       "'master.${ampDomain}?error=url_not_found'",
            #   #       {
            #   #         "ampDomain":
            #   #           { "Fn::GetAtt": ["AmplifyApp", "DefaultDomain"] },
            #   #       },
            #   #     ],
            #   # }
            #   method.response.header.Cache-Control: "'max-age=300'"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$')) 
                #if($inputRoot.toString().contains("Item")) 
                #set($context.responseOverride.header.Location = $inputRoot.Item.url.S) 
                #end
        type: "aws"

  /urls:
    ## Get all links for user
    get:
      summary: Fetch all URLs
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 10
        - name: last
          in: query
          schema:
            type: string
      # security:
      #   - UserAuthorizer: []
      # parameters:
      #   - $ref: "#/components/parameters/authHeader"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Cache-Control:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"

      ## API Gateway Integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [DDBReadRole, Arn]
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
        httpMethod: "POST"
        requestParameters:
          "integration.request.querystring.limit": "method.request.querystring.limit"
          "integration.request.querystring.last": "method.request.querystring.last"
        requestTemplates:
          application/json:
            Fn::Sub: |
              {
                "TableName": "${LinkTable}", 
                "IndexName": "OwnerIndex",
                "KeyConditionExpression": "#n_owner = :v_owner", 
                #set($limit = $input.params('limit'))
                #if("" != $limit.toString())
                "Limit": $limit,
                #end
                #set($last = $input.params('last'))
                #if("" != $last.toString())
                "ExclusiveStartKey": $util.base64Decode($last),
                #end
                "ExpressionAttributeValues": {
                  ":v_owner": {
                    "S": "nobody@example.org"
                  }
                },
                "ExpressionAttributeNames": {
                  "#n_owner": "owner"
                }
              }
            # {\":v_owner\": {\"S\": \"$context.authorizer.claims.email\"}},\"ExpressionAttributeNames\": {\"#n_owner\": \"owner\"}}" }
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'no-cache, no-store'"
              method.response.header.Access-Control-Allow-Origin:
                "Fn::If":
                  - "IsLocal"
                  - "'*'"
                  - Fn::Sub: "'${DomainName}'"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$')){
                #set($last = $input.path('$.LastEvaluatedKey'))
                #if($last && 0 != $last.length())"last":"$util.base64Encode($input.json('$.LastEvaluatedKey'))",#end
                "urls":[ #foreach($elem in $inputRoot.Items) 
                {"id":"$elem.id.S","url":"$elem.url.S","timestamp":"$elem.timestamp.S","owner":"$elem.owner.S","visits":$elem.visits.N}
                #if($foreach.hasNext),#end 
                #end]}

          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin:
                "Fn::If":
                  - "IsLocal"
                  - "'*'"
                  - Fn::Sub: "'${DomainName}'"
            responseTemplates:
              application/json:
                Fn::Sub: |
                  {
                    "error": true, 
                    "message": $input.json('$')
                  }
        type: "AWS"

    post:
      summary: Create new url
      # security:
      #   - UserAuthorizer: []
      x-amazon-apigateway-request-validator: body
      # parameters:
      #   - $ref: "#/components/parameters/authHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostBody"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"

      ## API Gateway integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [DDBCrudRole, Arn]
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"
        httpMethod: "POST"
        requestTemplates:
          application/json:
            Fn::Sub: |
              {
                "TableName": "${LinkTable}",
                "ConditionExpression": "attribute_not_exists(id)", 
                "Key": {
                  "id": {
                    "S": $input.json('$.id')
                  }
                }, 
                "ExpressionAttributeNames": {
                  "#u": "url",
                  "#o": "owner",
                  "#ts": "timestamp",
                  "#v": "visits"
                }, 
                "ExpressionAttributeValues": {
                  ":u": {
                    "S": $input.json('$.url')
                  },
                  ":o": {
                    "S": "nobody@example.org"
                  },
                  ":ts": {
                    "S": "$context.requestTime"
                  },
                  ":v": {
                    "N": "$input.json('$.visits')"
                  }
                }, 
                "UpdateExpression": "SET #u = :u, #o = :o, #ts = :ts, #v = :v", 
                "ReturnValues": "ALL_NEW"
              }
            #\"ExpressionAttributeValues\":{\":u\": {\"S\": $input.json('$.url')},\":o\": {\"S\": \"$context.authorizer.claims.email\"},\":ts\": {\"S\": \"$context.requestTime\"}}, \
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin:
                "Fn::If":
                  - "IsLocal"
                  - "'*'"
                  - Fn::Sub: "'${DomainName}'"
            responseTemplates:
              application/json:
                Fn::Sub: |
                  #set($inputRoot = $input.path('$')) 
                  {
                    "id": "$inputRoot.Attributes.id.S", 
                    "url": "$inputRoot.Attributes.url.S",
                    "timestamp": "$inputRoot.Attributes.timestamp.S", 
                    "owner": "$inputRoot.Attributes.owner.S"
                  }
          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin:
                "Fn::If":
                  - "IsLocal"
                  - "'*'"
                  - Fn::Sub: "'${DomainName}'"
            responseTemplates:
              application/json:
                Fn::Sub: |
                  #set($inputRoot = $input.path('$')) 
                  #if($inputRoot.toString().contains("ConditionalCheckFailedException")) 
                  #set($context.responseOverride.status = 200)
                  {
                    "error": true, 
                    "message": "URL link already exists"
                  } 
                  #end
        type: "aws"

    ## Options for get and post that do not have a linkId
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST, GET, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'authorization, content-type'"
              method.response.header.Access-Control-Allow-Origin:
                Fn::If:
                  - "IsLocal"
                  - "'*'"
                  - Fn::Sub: "'${DomainName}'"
        type: "mock"

components:
  schemas:
    PostBody:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
          pattern: ^https?://[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)
        visits:
          type: integer
      required:
        - id
        - url
        - visits
